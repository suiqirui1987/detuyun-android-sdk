/** * com.detuyun.api * 得图load.java */package com.detuyun.api;import java.io.File;import java.io.IOException;import java.util.HashMap;import org.apache.http.HttpResponse;import org.apache.http.HttpStatus;import org.apache.http.StatusLine;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpPost;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.util.EntityUtils;import org.json.JSONException;import org.json.JSONObject;import com.detuyun.api.utils.SimpleMultipartEntity;import com.detuyun.api.utils.DetuYunException;/** * Upload.java *  * @author vincent chen * @since 2012 Jun 18, 2012 4:52:49 PM */public class Uploader {	/**	 * 上传文件到得图云存储。 目前根据android系统版本的不同，只支持小文件上传。	 * 	 * @param policy	 * @param signature	 * @param bucket	 * @param sourceFile	 * @return	 * @throws DetuYunException	 */	public static HashMap<String, Object> upload(String policy, String signature, String bucket, String sourceFile)			throws DetuYunException {		HashMap<String, Object> hMap = new HashMap<String, Object>();		if (bucket == null || bucket.equals("")) {			throw new DetuYunException(10, "bucket can not be empty.");		}		if (sourceFile == null || sourceFile.equals("")) {			throw new DetuYunException(11, "source file can not be empty.");		}		if (policy == null || policy.equals("")) {			throw new DetuYunException(12, "policy can not be empty.");		}		if (signature == null || signature.equals("")) {			throw new DetuYunException(13, "signature can not be empty.");		}		HttpClient httpclient = new DefaultHttpClient();		HttpPost httppost = new HttpPost("http://api.detuyun.com");		try {			SimpleMultipartEntity sme = new SimpleMultipartEntity();			sme.addPart("postdata", policy);			sme.addPart("signature", signature);			sme.addPart("file", new File(sourceFile));			httppost.setEntity(sme);			HttpResponse response = httpclient.execute(httppost);			StatusLine statusLine = response.getStatusLine();			int code = statusLine.getStatusCode();			String str = EntityUtils.toString(response.getEntity());			if (code != HttpStatus.SC_OK) {				JSONObject obj = new JSONObject(str);				String msg = obj.getString("message");				msg = new String(msg.getBytes("UTF-8"), "UTF-8");				String url = obj.getString("url");				long time = obj.getLong("time");				boolean isSigned = false;				String signString = "";				if (!obj.isNull("sign")) {					signString = obj.getString("sign");					isSigned = true;				} else if (!obj.isNull("non-sign")) {					signString = obj.getString("non-sign");					isSigned = false;				}				DetuYunException exception = new DetuYunException(code, msg);				exception.isSigned = isSigned;				exception.url = url;				exception.time = time;				exception.signString = signString;				throw exception;			} else {				//JSONObject obj = new JSONObject(str);				//returnStr = obj.getString("url");				String[] kv = str.split("&");				for (String kvStr : kv) {					String[] k = kvStr.split("=");					hMap.put(k[0], k[1]);				}			}		} catch (ClientProtocolException e) {			e.printStackTrace();			throw new DetuYunException(30, e.getMessage());		} catch (IOException e) {			e.printStackTrace();			throw new DetuYunException(31, e.getMessage());		} catch (OutOfMemoryError e) {			e.printStackTrace();			throw new DetuYunException(33, e.getMessage());		} catch (JSONException e) {			throw new DetuYunException(32, e.getMessage());		}		return hMap;	}}